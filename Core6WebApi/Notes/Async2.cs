/*
    
Data Access Layer

async modifier
    -   ensures that await keyeord can be used inside method
    -   Transform the method into state machine (generated by compiler)
        ie compiler generate state machine for this method
    -   if not used async keyword then cant use await 

await operator
    -   tells to compiler that asynchronus method can't continue until the awaited asynchronous process is complete      
    -   in meantime control returns to caller of this method (potentially right back up to thread being freed)
    -   if no await use inside async mthod then method simply execute as syncronous method

process flow
    
    public async IActionResult MyActionThatCallsGetBooksAsync()
    {
        …
        var books = await GetBooksAsync();
        …
    }

    public async Task<IEnumerable<Book>> GetBooksAsync()
    {
        var bookIds = CalculateBookIdsForUser();
        var books = await _context.Books.Where(b =>
        bookIds.Contains(b.Id)).ToListAsync();
        return books;
    }

    public IEnumerable<int> CalculateBookIdsForUser()
    {
        …
        return bookIdsForUser;
    }
    

here when call comes to await, control is yield to caller of this method (in this case - MyActionThatCallsGetBooksAsync)
    this means execution of rest of GetBooksAsync() (below await keyword) method is suspended 
    and other code that might be in calling method can be executed (ie, MyActionThatCallsGetBooksAsync())
after some time call to DB finished and then control is return to var books = await.. ie suspended process ie rest of the code is resumed
    but how do we know awaited method is completed thats where TASK comes into picture

Allow Return Types for Async method
    -   void
        -   for event handler (button)
        -   only advise for event handler (button click event)
        -   hard to handle exception
        -   no easy way to capture exception
        -   difficult to test
        -   no easy way to notify calling code (caller method) the status of awaited operation
    -   Task
        -   perform some operation and return no values 
        -   represent the execution of async method not result of async method
    -   Task<T>
        -   perform some operation and return values 
        -   represent the execution of async method not result of async method, result is value of Type T
        -   Status, IsCancelled, IsCompleted and IsFaulted allow to determise STATE of TASK

Task 
    -   represent the execution of async method not result of async method
    -   state machine manages Task and Task<T>
    
why we cant use async in Interface ie async task<Rmployee> Get()
    -   because asycn await are related to implmentation detail, how method is implmented
        and interface is just contract


The Outer Facing Model
    How do we represent the resource data type?
    A    
        Model classes (DTOs)
        Statically typed approach
    B        
        Dynamics, anonymous objects,
        ExpandoObject
        Dynamically typed approach
    
        Mapping code in controller actions or Reusable IAsyncResultFilter

Manipulating Output with an IAsyncResultFilter
    -   Filters in ASP.NET Core MVC allow us to run code before or after specific stages in the request processing pipeline
    
The ASP.NET Core Request Pipeline Request Response
    
    Request   ->   [  next();// logic  ]   ->   [  next();// logic  ]   ->   [  next();// logic  ]
                   [                   ]        [                   ]        [                   ]
                   [     middleware    ]        [     middleware    ]        [     middleware    ]
                   [                   ]        [                   ]        [                   ]
    Response       [  next();// logic  ]   <-   [  next();// logic  ]   <-   [  next();// logic  ]



Manipulating Output with an IAsyncResultFilter
    ASP.NET Core MVC has its own pipeline it sends requests through
    Filters run within the MVC action invocation pipeline (aka filter pipeline)

The ASP.NET Core MVC Filter Pipeline

    
Authorization filters
Resource filters > Model binding
Action filters > Actions
Model Binding Action
Exception filters
Result filters
Result executes

Manipulating Output with an IAsyncResultFilter
    By using result filters, we
        can keep our actions cleaner
        promote reuse
    IResultFilter, IAsyncResultFilter
    - ResultFilterAttribute (abstract)
*/ 